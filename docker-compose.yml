version: '3.8'

services:
  # Flask 백엔드 API 서버
  taxihexa-backend:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://taxihexa_user:your_password@postgres:5432/taxihexa_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key
      - GOOGLE_MAPS_API_KEY=your-google-maps-api-key
      - CORS_ORIGINS=http://localhost:3000,https://your-frontend-domain.com
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads  # 프로필 이미지 등
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 데이터베이스 (PostGIS 확장 포함)
  postgres:
    image: postgis/postgis:15-3.3-alpine
    environment:
      - POSTGRES_DB=taxihexa_db
      - POSTGRES_USER=taxihexa_user
      - POSTGRES_PASSWORD=your_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis (세션, 캐싱, 실시간 매칭용)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Celery Worker (비동기 작업 처리)
  celery-worker:
    build: .
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://taxihexa_user:your_password@postgres:5432/taxihexa_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Beat (주기적 작업 스케줄러)
  celery-beat:
    build: .
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://taxihexa_user:your_password@postgres:5432/taxihexa_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Nginx (리버스 프록시, 정적 파일 서빙)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads  # 정적 파일 서빙
    depends_on:
      - taxihexa-backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: